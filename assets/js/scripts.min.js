/*!
 * gulp-nunjucks-sass-template
 * A Gulp 4 template including SCSS, Nunjucks, JS and more
 *
 * Url: https://github.com/DefaultSimon
 * Author: Simon Goričar
 * Copyright 2022. License: MIT
 */
window.onload=function(){const e=new IntersectionObserver(function(e,t){e.forEach(e=>{e.isIntersecting?(e.target.classList.remove("animate-off"),e.target.classList.add("animate")):(e.target.classList.remove("animate"),e.target.classList.add("animate-off"))})},{root:null,rootMargin:"24px",threshold:.5});function t(e){let t=window.innerWidth/2,n=window.innerHeight/2,s=e.clientX,a=e.clientY;this.querySelectorAll(".parallaxed").forEach((e,i)=>{let o=-.001*i-.001;e.style.marginLeft=`${(s-t)*o}%`,e.style.marginTop=`${(a-n)*o}%`})}document.querySelectorAll("section").forEach(t=>e.observe(t)),document.querySelectorAll(".parallax").forEach(e=>{e.addEventListener("mousemove",t)});const n=document.querySelectorAll(".section");let s=!1;function a(e,t,n,a){s=!0;let i=null,o=window.pageYOffset||document.documentElement.scrollTop,c=window.innerHeight,r=0,l=0;r="center"===a?t?(c+e.offsetHeight)/2:e.parentElement.getBoundingClientRect().top+(c+e.offsetHeight)/2:"bottom"===a?e.parentElement.getBoundingClientRect().bottom-c:e.getBoundingClientRect().top,console.log(o,r,l,e),function(){const e=["ms","moz","webkit","o"];for(let t=0,n=e.length;t<n&&!window.requestAnimationFrame;t++)window.requestAnimationFrame=window[e[t]+"RequestAnimationFrame"],window.cancelAnimationFrame=window[e[t]+"CancelAnimationFrame"]||window[e[t]+"CancelRequestAnimationFrame"]}(),window.requestAnimationFrame(function a(c){i||(i=c||(new Date).getTime());let d=(c-i)/+n;d=+d.toFixed(2);let m=+(f=d,f*(2-f)).toFixed(2);var f;l=+(l=o+r*m).toFixed(2),window.scrollTo(0,l),isNaN(l)||l<0||!t&&l<=0||!t&&l<=o+r+1||t&&l>=o+r||t&&l>=document.body.clientHeight-window.innerHeight-1||l>document.body.clientHeight-window.innerHeight?(cancelAnimationFrame(i),e&&e.focus(),l=0,s=!1):window.requestAnimationFrame(a)})}function i(e,t,n,s){!n&&t.offsetHeight<window.innerHeight||(e.classList.add("animate-fade"),t.classList.remove("animate-fade"))}function o(e){e.preventDefault();let t=e.deltaY>0;if(!s){let e,o=Array.from(n).findIndex(e=>e.classList.contains("animate"));if(e=t?o+1<n.length?Array.from(n)[o+1]:Array.from(n)[o]:o>0?Array.from(n)[o-1]:Array.from(n)[0],console.log(n[o],e),n[o].classList.contains("section--variants")){let n=document.querySelectorAll(".section--variants .variant");t&&n[n.length-1].classList.contains("variant--current")||!t&&n[0].classList.contains("variant--current")?new a(e,t,600):new function(e,t,n){s=!0;let a=e.querySelector(".section__variants").getBoundingClientRect().top,i=e.querySelector("ul"),o=e.querySelector(".variant--current"),c=n?Array.from(t).findIndex(e=>e.classList.contains("variant--current"))+1:Array.from(t).findIndex(e=>e.classList.contains("variant--current"))-1,r=Array.from(t)[c].getBoundingClientRect().top,l=0;if(i.style.transform){let e=window.getComputedStyle(i);l=new DOMMatrixReadOnly(e.transform).m42}console.log(a,i.getBoundingClientRect().top,r,l),o.classList.remove("variant--current"),Array.from(t)[c].classList.add("variant--current"),i.style.transform=`translateY(${a-r+l}px)`,setTimeout(()=>s=!1,300)}(document.querySelector(".section--variants"),n,t)}else if(n[o].classList.contains("section--world")){let i=document.querySelectorAll(".section--world .section__slide");t&&i[i.length-1].classList.contains("show")||!t&&i[0].classList.contains("show")?new a(e,t,600):new function(e,t,n){s=!0;let a=Array.from(t).findIndex(e=>e.classList.contains("show")),i=n?a+1:a-1;Array.from(t)[a].classList.remove("show"),Array.from(t)[i].classList.add("show"),e.setAttribute("data-slide",+i),setTimeout(()=>s=!1,300)}(n[o],i,t)}else if(n[o].classList.contains("section--roadmap")||e.classList.contains("section--roadmap")&&!t||e.classList.contains("section--opportunities")&&!t){let s=document.querySelector(".section--roadmap .expertise");s.classList.contains("animate-off")?t?(new i(n[o].querySelector(".section__content"),s,t,900),new a(s,t,900,"bottom"),s.classList.remove("animate-off")):(e.querySelector(".community").classList.remove("animate-fade"),new a(e.querySelector(".community"),t,900,"center")):s.classList.contains("animate-fade")?(s.classList.remove("animate-fade"),e.querySelector(".section__content").classList.add("animate-fade"),new a(s,t,900,"bottom")):t?(new a(e,t,900,"bottom"),s.classList.add("animate-fade")):(new a(n[o],t,600),s.classList.add("animate-off"),n[o].querySelector(".section__content").classList.remove("animate-fade"))}else if(n[o].classList.contains("section--opportunities")||e.classList.contains("section--opportunities")&&!t||e.classList.contains("section--backstory")&&!t){let s=document.querySelector(".section--opportunities .community");s.classList.contains("animate-off")?t?(s.classList.remove("animate-off"),new i(n[o].querySelector(".section__content"),s,t,900),new a(s,t,900,"center")):(e.querySelector(".place").classList.remove("animate-fade"),new a(e.querySelector(".place"),t,900,"center")):s.classList.contains("animate-fade")?(s.classList.remove("animate-fade"),e.querySelector(".section__content").classList.add("animate-fade"),new a(s,t,900,"center")):t?(new a(s,t,900,"center"),s.classList.add("animate-fade")):(new a(n[o],t,600),s.classList.add("animate-off"),n[o].querySelector(".section__content").classList.remove("animate-fade"))}else if(n[o].classList.contains("section--backstory")||e.classList.contains("section--backstory")&&!t||e.classList.contains("section--world")&&!t){let s=document.querySelector(".section--backstory .place");s.classList.contains("animate-off")?t?(s.classList.remove("animate-off"),new i(n[o].querySelector(".section__content"),s,t,900),new a(s,t,900,"center")):(n[o].classList.remove("animate-off"),new a(e,t,600)):s.classList.contains("animate-fade")?(s.classList.remove("animate-fade"),e.querySelector(".section__content").classList.add("animate-fade"),new a(s,t,900,"center")):t?(new a(s,t,900,"center"),s.classList.add("animate-fade")):(new a(n[o],t,600),s.classList.add("animate-off"),n[o].querySelector(".section__content").classList.remove("animate-fade"))}else new a(e,t,600)}}window.addEventListener("wheel",o,{passive:!1}),window.addEventListener("mousewheel",o,{passive:!1}),window.addEventListener("DOMMouseScroll",o,{passive:!1}),document.querySelectorAll("iframe").forEach(e=>{e.addEventListener("wheel",o,{passive:!1}),e.addEventListener("mousewheel",o,{passive:!1}),e.addEventListener("DOMMouseScroll",o,{passive:!1})}),new Splide(".splide",{perPage:3,perMove:1,gap:"32px",breakpoints:{820:{perPage:2},520:{perPage:1}}}).mount()};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdHMuanMiXSwibmFtZXMiOlsid2luZG93Iiwib25sb2FkIiwib2JzZXJ2ZXIiLCJJbnRlcnNlY3Rpb25PYnNlcnZlciIsImVudHJpZXMiLCJmb3JFYWNoIiwiZW50cnkiLCJpc0ludGVyc2VjdGluZyIsInRhcmdldCIsImNsYXNzTGlzdCIsInJlbW92ZSIsImFkZCIsInJvb3QiLCJyb290TWFyZ2luIiwidGhyZXNob2xkIiwiUGFyYWxsYXgiLCJlIiwiX3ciLCJpbm5lcldpZHRoIiwiX2giLCJpbm5lckhlaWdodCIsIl9tb3VzZVgiLCJjbGllbnRYIiwiX21vdXNlWSIsImNsaWVudFkiLCJ0aGlzIiwicXVlcnlTZWxlY3RvckFsbCIsImVsIiwiaW5kZXgiLCJtdWx0aXBseSIsInN0eWxlIiwibWFyZ2luTGVmdCIsIm1hcmdpblRvcCIsImRvY3VtZW50Iiwib2JzZXJ2ZSIsInBhcmFsbGF4IiwiYWRkRXZlbnRMaXN0ZW5lciIsInNlY3Rpb25zIiwiaXNTY3JvbGxpbmciLCJTY3JvbGwiLCJlbGVtZW50IiwiaXNEb3duIiwic3BlZWQiLCJ0eXBlIiwic3RhcnQiLCJmaXJzdFBvcyIsInBhZ2VZT2Zmc2V0IiwiZG9jdW1lbnRFbGVtZW50Iiwic2Nyb2xsVG9wIiwid2luZG93SGVpZ2h0IiwicG9zIiwib2Zmc2V0SGVpZ2h0IiwicGFyZW50RWxlbWVudCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInRvcCIsImJvdHRvbSIsImNvbnNvbGUiLCJsb2ciLCJicm93c2VyIiwieCIsImxlbmd0aCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwic2hvd0FuaW1hdGlvbiIsInRpbWVzdGFtcCIsIkRhdGUiLCJnZXRUaW1lIiwicHJvZ3Jlc3MiLCJ0b0ZpeGVkIiwiZWFzZUluUGVyY2VudGFnZSIsIm4iLCJzY3JvbGxUbyIsImlzTmFOIiwiYm9keSIsImNsaWVudEhlaWdodCIsImZvY3VzIiwiQW5pbWF0ZUZhZGUiLCJjdXJyZW50IiwiaWREb3duIiwidGltZSIsIldoZWVsIiwicHJldmVudERlZmF1bHQiLCJkZWx0YVkiLCJBcnJheSIsImZyb20iLCJmaW5kSW5kZXgiLCJzZWN0aW9uIiwiY29udGFpbnMiLCJ2YXJpYW50cyIsImNvbnRhaW5lciIsImVsZW1lbnRzIiwiY29udGFpbmVyVG9wIiwicXVlcnlTZWxlY3RvciIsInBhcmVudCIsInRhcmdldEluZGV4IiwidHJhbnNmb3JtIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsIkRPTU1hdHJpeFJlYWRPbmx5IiwibTQyIiwic2V0VGltZW91dCIsInNsaWRlcyIsInNldEF0dHJpYnV0ZSIsImV4cGVydGlzZSIsImNvbW11bml0eSIsInBsYWNlIiwicGFzc2l2ZSIsImlmcmFtZSIsIlNwbGlkZSIsInBlclBhZ2UiLCJwZXJNb3ZlIiwiZ2FwIiwiYnJlYWtwb2ludHMiLCI4MjAiLCI1MjAiLCJtb3VudCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQUEsT0FBQUMsT0FBQSxXQWFBLE1BQUFDLEVBQUEsSUFBQUMscUJBTkEsU0FBQUMsRUFBQUYsR0FQQUUsRUFBQUMsUUFBQUMsSUFDQUEsRUFBQUMsZ0JBRUFELEVBQUFFLE9BQUFDLFVBQUFDLE9BQUEsZUFDQUosRUFBQUUsT0FBQUMsVUFBQUUsSUFBQSxhQUdBTCxFQUFBRSxPQUFBQyxVQUFBQyxPQUFBLFdBQ0FKLEVBQUFFLE9BQUFDLFVBQUFFLElBQUEsb0JBTkFDLEtBQUEsS0FDQUMsV0FBQSxPQUNBQyxVQUFBLEtBY0EsU0FBQUMsRUFBQUMsR0FDQSxJQUFBQyxFQUFBakIsT0FBQWtCLFdBQUEsRUFDQUMsRUFBQW5CLE9BQUFvQixZQUFBLEVBQ0FDLEVBQUFMLEVBQUFNLFFBQ0FDLEVBQUFQLEVBQUFRLFFBQ0FDLEtBQUFDLGlCQUFBLGVBQ0FyQixRQUFBLENBQUFzQixFQUFBQyxLQUNBLElBQUFDLEdBQUEsS0FBQUQsRUFBQSxLQUNBRCxFQUFBRyxNQUFBQyxlQUFBVixFQUFBSixHQUFBWSxLQUNBRixFQUFBRyxNQUFBRSxj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R0FBQXlCLFNBQUEsTUFnQkEsSUFBQUUsT0FBQSxXQUNBQyxRQUFBLEVBQ0FDLFFBQUEsRUFDQUMsSUFBQSxPQUNBQyxhQUNBQyxLQUNBSixRQUFBLEdBRUFLLEtBQ0FMLFFBQUEsTUFJQU0iLCJmaWxlIjoic2NyaXB0cy5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJ3aW5kb3cub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICBjb25zdCBvYnNlcnZlck9wdGlvbnMgPSB7XG4gICAgcm9vdDogbnVsbCxcbiAgICByb290TWFyZ2luOiBcIjI0cHhcIixcbiAgICB0aHJlc2hvbGQ6IDAuNVxuICB9O1xuXG4gIGZ1bmN0aW9uIG9ic2VydmVyQ2FsbGJhY2soZW50cmllcywgb2JzZXJ2ZXIpIHtcbiAgICBlbnRyaWVzLmZvckVhY2goZW50cnkgPT4ge1xuICAgICAgaWYgKGVudHJ5LmlzSW50ZXJzZWN0aW5nKSB7XG4gICAgICAgIC8vIGZhZGUgaW4gb2JzZXJ2ZWQgZWxlbWVudHMgdGhhdCBhcmUgaW4gdmlld1xuICAgICAgICBlbnRyeS50YXJnZXQuY2xhc3NMaXN0LnJlbW92ZSgnYW5pbWF0ZS1vZmYnKTtcbiAgICAgICAgZW50cnkudGFyZ2V0LmNsYXNzTGlzdC5hZGQoJ2FuaW1hdGUnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGZhZGUgb3V0IG9ic2VydmVkIGVsZW1lbnRzIHRoYXQgYXJlIG5vdCBpbiB2aWV3XG4gICAgICAgIGVudHJ5LnRhcmdldC5jbGFzc0xpc3QucmVtb3ZlKCdhbmltYXRlJyk7XG4gICAgICAgIGVudHJ5LnRhcmdldC5jbGFzc0xpc3QuYWRkKCdhbmltYXRlLW9mZicpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIob2JzZXJ2ZXJDYWxsYmFjaywgb2JzZXJ2ZXJPcHRpb25zKTtcblxuICBjb25zdCBmYWRlRWxtcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3NlY3Rpb24nKTtcbiAgZmFkZUVsbXMuZm9yRWFjaChlbCA9PiBvYnNlcnZlci5vYnNlcnZlKGVsKSk7XG5cbiAgZnVuY3Rpb24gUGFyYWxsYXgoZSkge1xuICAgIGxldCBfdyA9IHdpbmRvdy5pbm5lcldpZHRoLzI7XG4gICAgbGV0IF9oID0gd2luZG93LmlubmVySGVpZ2h0LzI7XG4gICAgbGV0IF9tb3VzZVggPSBlLmNsaWVudFg7XG4gICAgbGV0IF9tb3VzZVkgPSBlLmNsaWVudFk7XG4gICAgbGV0IGVsZW1zID0gdGhpcy5xdWVyeVNlbGVjdG9yQWxsKCcucGFyYWxsYXhlZCcpO1xuICAgIGVsZW1zLmZvckVhY2goKGVsLCBpbmRleCkgPT4ge1xuICAgICAgbGV0IG11bHRpcGx5ID0gaW5kZXggKiAtMC4wMDEgLSAwLjAwMTtcbiAgICAgIGVsLnN0eWxlLm1hcmdpbkxlZnQgPSBgJHsoX21vdXNlWCAtIF93KSAqIG11bHRpcGx5fSVgO1xuICAgICAgZWwuc3R5bGUubWFyZ2luVG9wID0gYCR7KF9tb3VzZVkgLSBfaCkgKiBtdWx0aXBseX0lYDtcbiAgICB9KTtcbiAgfVxuXG4gIGNvbnN0IHBhcmFsbGF4ZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcucGFyYWxsYXgnKTtcbiAgcGFyYWxsYXhlcy5mb3JFYWNoKChwYXJhbGxheCkgPT4ge1xuICAgIHBhcmFsbGF4LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgUGFyYWxsYXgpO1xuICB9KTtcblxuICBjb25zdCBzZWN0aW9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zZWN0aW9uJyk7XG5cbiAgLy8gc2VjdGlvbnMuZm9yRWFjaCgoc2VjdGlvbikgPT4ge1xuICAvLyAgIGNvbnNvbGUubG9nKHNlY3Rpb24uY2xhc3NMaXN0KTtcbiAgLy8gfSk7XG4gIGxldCBpc1Njcm9sbGluZyA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIFNjcm9sbChlbGVtZW50LCBpc0Rvd24sIHNwZWVkLCB0eXBlKSB7XG4gICAgaXNTY3JvbGxpbmcgPSB0cnVlO1xuICAgIGxldCBzdGFydCA9IG51bGw7XG4gICAgbGV0IGZpcnN0UG9zID0gd2luZG93LnBhZ2VZT2Zmc2V0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3A7XG4gICAgbGV0IHdpbmRvd0hlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICBsZXQgdGFyZ2V0ID0gMDtcbiAgICBsZXQgcG9zID0gMDtcblxuICAgIGlmICh0eXBlID09PSAnY2VudGVyJykge1xuICAgICAgdGFyZ2V0ID0gaXNEb3duID8gKHdpbmRvd0hlaWdodCArIGVsZW1lbnQub2Zmc2V0SGVpZ2h0KSAvIDIgOiBlbGVtZW50LnBhcmVudEVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wICsgKHdpbmRvd0hlaWdodCArIGVsZW1lbnQub2Zmc2V0SGVpZ2h0KSAvIDI7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnYm90dG9tJykge1xuICAgICAgdGFyZ2V0ID0gZWxlbWVudC5wYXJlbnRFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmJvdHRvbSAtIHdpbmRvd0hlaWdodDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGFyZ2V0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3A7XG4gICAgfVxuXG4gICAgY29uc29sZS5sb2coZmlyc3RQb3MsIHRhcmdldCwgcG9zLCBlbGVtZW50KTtcblxuICAgIChmdW5jdGlvbigpIHtcblxuICAgICAgY29uc3QgYnJvd3NlciA9IFsnbXMnLCAnbW96JywgJ3dlYmtpdCcsICdvJ107XG5cbiAgICAgIGZvcihsZXQgeCA9IDAsIGxlbmd0aCA9IGJyb3dzZXIubGVuZ3RoOyB4IDwgbGVuZ3RoICYmICF3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lOyB4KyspIHtcbiAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA9IHdpbmRvd1ticm93c2VyW3hdKydSZXF1ZXN0QW5pbWF0aW9uRnJhbWUnXTtcbiAgICAgICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lID0gd2luZG93W2Jyb3dzZXJbeF0rJ0NhbmNlbEFuaW1hdGlvbkZyYW1lJ10gfHwgd2luZG93W2Jyb3dzZXJbeF0rJ0NhbmNlbFJlcXVlc3RBbmltYXRpb25GcmFtZSddO1xuICAgICAgfVxuXG4gICAgfSgpKTtcblxuICAgIGZ1bmN0aW9uIHNob3dBbmltYXRpb24gKHRpbWVzdGFtcCkge1xuXG4gICAgICBpZighc3RhcnQpIHsgc3RhcnQgPSB0aW1lc3RhbXAgfHwgbmV3IERhdGUoKS5nZXRUaW1lKCk7IH0gLy9nZXQgaWQgb2YgYW5pbWF0aW9uXG5cbiAgICAgIGxldCBlbGFwc2VkID0gdGltZXN0YW1wIC0gc3RhcnQ7XG4gICAgICBsZXQgcHJvZ3Jlc3MgPSBlbGFwc2VkIC8gK3NwZWVkOyAvLyBhbmltYXRpb24gZHVyYXRpb24gNTAwbXNcbiAgICAgIHByb2dyZXNzID0gK3Byb2dyZXNzLnRvRml4ZWQoMik7XG5cbiAgICAgIC8vIGNvbnNvbGUubG9nKHN0YXJ0LCB0aW1lc3RhbXAsIHByb2dyZXNzLCBlbGFwc2VkLCBzcGVlZCwgZmlyc3RQb3MsIHRhcmdldCwgcG9zKTtcblxuICAgICAgLy9lYXNlIGluIGZ1bmN0aW9uIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2NvbXBvbmVudC9lYXNlL2Jsb2IvbWFzdGVyL2luZGV4LmpzXG4gICAgICBjb25zdCBvdXRRdWFkID0gZnVuY3Rpb24obil7XG4gICAgICAgIHJldHVybiBuICogKDIgLSBuKTtcbiAgICAgIH07XG5cbiAgICAgIGxldCBlYXNlSW5QZXJjZW50YWdlID0gKyhvdXRRdWFkKHByb2dyZXNzKSkudG9GaXhlZCgyKTtcblxuICAgICAgcG9zID0gZmlyc3RQb3MgKyAodGFyZ2V0ICogZWFzZUluUGVyY2VudGFnZSk7XG4gICAgICBwb3MgPSArcG9zLnRvRml4ZWQoMik7XG4gICAgICB3aW5kb3cuc2Nyb2xsVG8oMCwgcG9zKTtcblxuICAgICAgLy8gY29uc29sZS5sb2coZmlyc3RQb3MsIHRhcmdldCwgcG9zLCBlYXNlSW5QZXJjZW50YWdlKTtcblxuICAgICAgaWYoIGlzTmFOKHBvcykgfHwgcG9zIDwgMCB8fFxuICAgICAgICAhaXNEb3duICYmIHBvcyA8PSAwIHx8XG4gICAgICAgICFpc0Rvd24gJiYgcG9zIDw9IChmaXJzdFBvcyArIHRhcmdldCArIDEpIHx8XG4gICAgICAgIGlzRG93biAmJiBwb3MgPj0gKGZpcnN0UG9zICsgdGFyZ2V0KSB8fFxuICAgICAgICBpc0Rvd24gJiYgcG9zID49IGRvY3VtZW50LmJvZHkuY2xpZW50SGVpZ2h0IC0gd2luZG93LmlubmVySGVpZ2h0IC0gMSB8fFxuICAgICAgICBwb3MgPiBkb2N1bWVudC5ib2R5LmNsaWVudEhlaWdodCAtIHdpbmRvdy5pbm5lckhlaWdodCApIHtcbiAgICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUoc3RhcnQpO1xuICAgICAgICBpZihlbGVtZW50KSB7XG4gICAgICAgICAgZWxlbWVudC5mb2N1cygpO1xuICAgICAgICB9XG4gICAgICAgIHBvcyA9IDA7XG4gICAgICAgIGlzU2Nyb2xsaW5nID0gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHNob3dBbmltYXRpb24pO1xuICAgICAgfVxuICAgIH1cbiAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHNob3dBbmltYXRpb24pO1xuICB9XG5cbiAgZnVuY3Rpb24gSW5uZXJTY3JvbGwoY29udGFpbmVyLCBlbGVtZW50cywgaXNEb3duKSB7XG4gICAgaXNTY3JvbGxpbmcgPSB0cnVlO1xuICAgIGxldCBjb250YWluZXJUb3AgPSBjb250YWluZXIucXVlcnlTZWxlY3RvcignLnNlY3Rpb25fX3ZhcmlhbnRzJykuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wO1xuICAgIGxldCBwYXJlbnQgPSBjb250YWluZXIucXVlcnlTZWxlY3RvcigndWwnKTtcbiAgICBsZXQgY3VycmVudCA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcudmFyaWFudC0tY3VycmVudCcpO1xuICAgIGxldCB0YXJnZXRJbmRleCA9IGlzRG93biA/XG4gICAgICBBcnJheS5mcm9tKGVsZW1lbnRzKS5maW5kSW5kZXgoIGVsID0+IGVsLmNsYXNzTGlzdC5jb250YWlucygndmFyaWFudC0tY3VycmVudCcpKSArIDEgOlxuICAgICAgQXJyYXkuZnJvbShlbGVtZW50cykuZmluZEluZGV4KCBlbCA9PiBlbC5jbGFzc0xpc3QuY29udGFpbnMoJ3ZhcmlhbnQtLWN1cnJlbnQnKSkgLSAxO1xuICAgIGxldCB0YXJnZXQgPSBBcnJheS5mcm9tKGVsZW1lbnRzKVt0YXJnZXRJbmRleF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wO1xuICAgIGxldCBwb3MgPSAwO1xuICAgIGlmIChwYXJlbnQuc3R5bGUudHJhbnNmb3JtKSB7XG4gICAgICBsZXQgc3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShwYXJlbnQpO1xuICAgICAgbGV0IG1hdHJpeCA9IG5ldyBET01NYXRyaXhSZWFkT25seShzdHlsZS50cmFuc2Zvcm0pO1xuICAgICAgcG9zID0gbWF0cml4Lm00MjtcbiAgICB9XG4gICAgY29uc29sZS5sb2coY29udGFpbmVyVG9wLCBwYXJlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wLCB0YXJnZXQsIHBvcyk7XG4gICAgY3VycmVudC5jbGFzc0xpc3QucmVtb3ZlKCd2YXJpYW50LS1jdXJyZW50Jyk7XG4gICAgQXJyYXkuZnJvbShlbGVtZW50cylbdGFyZ2V0SW5kZXhdLmNsYXNzTGlzdC5hZGQoJ3ZhcmlhbnQtLWN1cnJlbnQnKTtcbiAgICBwYXJlbnQuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZVkoJHtjb250YWluZXJUb3AgLSB0YXJnZXQgKyBwb3N9cHgpYDtcbiAgICBzZXRUaW1lb3V0KCgpID0+IGlzU2Nyb2xsaW5nID0gZmFsc2UsIDMwMCk7XG4gIH1cblxuICBmdW5jdGlvbiBTbGlkZXNTY3JvbGwoY29udGFpbmVyLCBlbGVtZW50cywgaXNEb3duKSB7XG4gICAgaXNTY3JvbGxpbmcgPSB0cnVlO1xuICAgIGxldCBjdXJyZW50ID0gQXJyYXkuZnJvbShlbGVtZW50cykuZmluZEluZGV4KGVsID0+IGVsLmNsYXNzTGlzdC5jb250YWlucygnc2hvdycpKTtcbiAgICBsZXQgdGFyZ2V0ID0gaXNEb3duID8gY3VycmVudCArIDEgOiBjdXJyZW50IC0gMTtcbiAgICBBcnJheS5mcm9tKGVsZW1lbnRzKVtjdXJyZW50XS5jbGFzc0xpc3QucmVtb3ZlKCdzaG93Jyk7XG4gICAgQXJyYXkuZnJvbShlbGVtZW50cylbdGFyZ2V0XS5jbGFzc0xpc3QuYWRkKCdzaG93Jyk7XG4gICAgY29udGFpbmVyLnNldEF0dHJpYnV0ZSgnZGF0YS1zbGlkZScsICt0YXJnZXQpO1xuICAgIHNldFRpbWVvdXQoKCkgPT4gaXNTY3JvbGxpbmcgPSBmYWxzZSwgMzAwKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEFuaW1hdGVGYWRlKGN1cnJlbnQsIHRhcmdldCwgaWREb3duLCB0aW1lKSB7XG4gICAgaWYgKCEoIWlkRG93biAmJiB0YXJnZXQub2Zmc2V0SGVpZ2h0IDwgd2luZG93LmlubmVySGVpZ2h0KSkge1xuICAgICAgY3VycmVudC5jbGFzc0xpc3QuYWRkKCdhbmltYXRlLWZhZGUnKTtcbiAgICAgIHRhcmdldC5jbGFzc0xpc3QucmVtb3ZlKCdhbmltYXRlLWZhZGUnKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBXaGVlbChlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGxldCBpc0Rvd24gPSBlLmRlbHRhWSA+IDA7XG4gICAgaWYgKCFpc1Njcm9sbGluZykge1xuICAgICAgbGV0IGN1cnJlbnQgPSBBcnJheS5mcm9tKHNlY3Rpb25zKS5maW5kSW5kZXgoc2VjdGlvbiA9PiBzZWN0aW9uLmNsYXNzTGlzdC5jb250YWlucygnYW5pbWF0ZScpKTtcbiAgICAgIGxldCB0YXJnZXQ7XG4gICAgICBpZiAoaXNEb3duKSB7XG4gICAgICAgIHRhcmdldCA9IGN1cnJlbnQgKyAxIDwgc2VjdGlvbnMubGVuZ3RoID8gQXJyYXkuZnJvbShzZWN0aW9ucylbY3VycmVudCArIDFdIDogQXJyYXkuZnJvbShzZWN0aW9ucylbY3VycmVudF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0YXJnZXQgPSBjdXJyZW50ID4gMCA/IEFycmF5LmZyb20oc2VjdGlvbnMpW2N1cnJlbnQgLSAxXSA6IEFycmF5LmZyb20oc2VjdGlvbnMpWzBdO1xuICAgICAgfVxuXG4gICAgICBjb25zb2xlLmxvZyhzZWN0aW9uc1tjdXJyZW50XSwgdGFyZ2V0KTtcblxuICAgICAgaWYgKHNlY3Rpb25zW2N1cnJlbnRdLmNsYXNzTGlzdC5jb250YWlucygnc2VjdGlvbi0tdmFyaWFudHMnKSkge1xuICAgICAgICBsZXQgdmFyaWFudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuc2VjdGlvbi0tdmFyaWFudHMgLnZhcmlhbnQnKTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGlzRG93biAmJiB2YXJpYW50c1t2YXJpYW50cy5sZW5ndGggLSAxXS5jbGFzc0xpc3QuY29udGFpbnMoJ3ZhcmlhbnQtLWN1cnJlbnQnKSB8fFxuICAgICAgICAgICFpc0Rvd24gJiYgdmFyaWFudHNbMF0uY2xhc3NMaXN0LmNvbnRhaW5zKCd2YXJpYW50LS1jdXJyZW50JylcbiAgICAgICAgKSB7XG4gICAgICAgICAgbmV3IFNjcm9sbCh0YXJnZXQsIGlzRG93biwgNjAwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXcgSW5uZXJTY3JvbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNlY3Rpb24tLXZhcmlhbnRzJyksIHZhcmlhbnRzLCBpc0Rvd24pO1xuICAgICAgICB9XG5cbiAgICAgIH0gZWxzZSBpZiAoc2VjdGlvbnNbY3VycmVudF0uY2xhc3NMaXN0LmNvbnRhaW5zKCdzZWN0aW9uLS13b3JsZCcpKSB7XG4gICAgICAgIGxldCBzbGlkZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuc2VjdGlvbi0td29ybGQgLnNlY3Rpb25fX3NsaWRlJyk7XG4gICAgICAgIGlmIChpc0Rvd24gJiYgc2xpZGVzW3NsaWRlcy5sZW5ndGggLSAxXS5jbGFzc0xpc3QuY29udGFpbnMoJ3Nob3cnKSB8fFxuICAgICAgICAgICFpc0Rvd24gJiYgc2xpZGVzWzBdLmNsYXNzTGlzdC5jb250YWlucygnc2hvdycpKSB7XG4gICAgICAgICAgbmV3IFNjcm9sbCh0YXJnZXQsIGlzRG93biwgNjAwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXcgU2xpZGVzU2Nyb2xsKHNlY3Rpb25zW2N1cnJlbnRdLCBzbGlkZXMsIGlzRG93bik7XG4gICAgICAgIH1cblxuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgc2VjdGlvbnNbY3VycmVudF0uY2xhc3NMaXN0LmNvbnRhaW5zKCdzZWN0aW9uLS1yb2FkbWFwJykgfHxcbiAgICAgICAgdGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnc2VjdGlvbi0tcm9hZG1hcCcpICYmICFpc0Rvd24gfHxcbiAgICAgICAgdGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnc2VjdGlvbi0tb3Bwb3J0dW5pdGllcycpICYmICFpc0Rvd25cbiAgICAgICkge1xuICAgICAgICBsZXQgZXhwZXJ0aXNlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNlY3Rpb24tLXJvYWRtYXAgLmV4cGVydGlzZScpO1xuICAgICAgICBpZiAoZXhwZXJ0aXNlLmNsYXNzTGlzdC5jb250YWlucygnYW5pbWF0ZS1vZmYnKSkge1xuICAgICAgICAgIGlmIChpc0Rvd24pIHtcbiAgICAgICAgICAgIG5ldyBBbmltYXRlRmFkZShzZWN0aW9uc1tjdXJyZW50XS5xdWVyeVNlbGVjdG9yKCcuc2VjdGlvbl9fY29udGVudCcpLCBleHBlcnRpc2UsIGlzRG93biwgOTAwKTtcbiAgICAgICAgICAgIG5ldyBTY3JvbGwoZXhwZXJ0aXNlLCBpc0Rvd24sIDkwMCwgJ2JvdHRvbScpO1xuICAgICAgICAgICAgZXhwZXJ0aXNlLmNsYXNzTGlzdC5yZW1vdmUoJ2FuaW1hdGUtb2ZmJyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRhcmdldC5xdWVyeVNlbGVjdG9yKCcuY29tbXVuaXR5JykuY2xhc3NMaXN0LnJlbW92ZSgnYW5pbWF0ZS1mYWRlJyk7XG4gICAgICAgICAgICBuZXcgU2Nyb2xsKHRhcmdldC5xdWVyeVNlbGVjdG9yKCcuY29tbXVuaXR5JyksIGlzRG93biwgOTAwLCAnY2VudGVyJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGV4cGVydGlzZS5jbGFzc0xpc3QuY29udGFpbnMoJ2FuaW1hdGUtZmFkZScpKSB7XG4gICAgICAgICAgZXhwZXJ0aXNlLmNsYXNzTGlzdC5yZW1vdmUoJ2FuaW1hdGUtZmFkZScpO1xuICAgICAgICAgIHRhcmdldC5xdWVyeVNlbGVjdG9yKCcuc2VjdGlvbl9fY29udGVudCcpLmNsYXNzTGlzdC5hZGQoJ2FuaW1hdGUtZmFkZScpO1xuICAgICAgICAgIG5ldyBTY3JvbGwoZXhwZXJ0aXNlLCBpc0Rvd24sIDkwMCwgJ2JvdHRvbScpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChpc0Rvd24pIHtcbiAgICAgICAgICAgIG5ldyBTY3JvbGwodGFyZ2V0LCBpc0Rvd24sIDkwMCwgJ2JvdHRvbScpO1xuICAgICAgICAgICAgZXhwZXJ0aXNlLmNsYXNzTGlzdC5hZGQoJ2FuaW1hdGUtZmFkZScpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuZXcgU2Nyb2xsKHNlY3Rpb25zW2N1cnJlbnRdLCBpc0Rvd24sIDYwMCk7XG4gICAgICAgICAgICBleHBlcnRpc2UuY2xhc3NMaXN0LmFkZCgnYW5pbWF0ZS1vZmYnKTtcbiAgICAgICAgICAgIHNlY3Rpb25zW2N1cnJlbnRdLnF1ZXJ5U2VsZWN0b3IoJy5zZWN0aW9uX19jb250ZW50JykuY2xhc3NMaXN0LnJlbW92ZSgnYW5pbWF0ZS1mYWRlJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgIHNlY3Rpb25zW2N1cnJlbnRdLmNsYXNzTGlzdC5jb250YWlucygnc2VjdGlvbi0tb3Bwb3J0dW5pdGllcycpIHx8XG4gICAgICAgIHRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ3NlY3Rpb24tLW9wcG9ydHVuaXRpZXMnKSAmJiAhaXNEb3duIHx8XG4gICAgICAgIHRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ3NlY3Rpb24tLWJhY2tzdG9yeScpICYmICFpc0Rvd25cbiAgICAgICkge1xuICAgICAgICBsZXQgY29tbXVuaXR5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNlY3Rpb24tLW9wcG9ydHVuaXRpZXMgLmNvbW11bml0eScpO1xuICAgICAgICBpZiAoY29tbXVuaXR5LmNsYXNzTGlzdC5jb250YWlucygnYW5pbWF0ZS1vZmYnKSkge1xuICAgICAgICAgIGlmIChpc0Rvd24pIHtcbiAgICAgICAgICAgIGNvbW11bml0eS5jbGFzc0xpc3QucmVtb3ZlKCdhbmltYXRlLW9mZicpO1xuICAgICAgICAgICAgbmV3IEFuaW1hdGVGYWRlKHNlY3Rpb25zW2N1cnJlbnRdLnF1ZXJ5U2VsZWN0b3IoJy5zZWN0aW9uX19jb250ZW50JyksIGNvbW11bml0eSwgaXNEb3duLCA5MDApO1xuICAgICAgICAgICAgbmV3IFNjcm9sbChjb21tdW5pdHksIGlzRG93biwgOTAwLCAnY2VudGVyJyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRhcmdldC5xdWVyeVNlbGVjdG9yKCcucGxhY2UnKS5jbGFzc0xpc3QucmVtb3ZlKCdhbmltYXRlLWZhZGUnKTtcbiAgICAgICAgICAgIG5ldyBTY3JvbGwodGFyZ2V0LnF1ZXJ5U2VsZWN0b3IoJy5wbGFjZScpLCBpc0Rvd24sIDkwMCwgJ2NlbnRlcicpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChjb21tdW5pdHkuY2xhc3NMaXN0LmNvbnRhaW5zKCdhbmltYXRlLWZhZGUnKSkge1xuICAgICAgICAgIGNvbW11bml0eS5jbGFzc0xpc3QucmVtb3ZlKCdhbmltYXRlLWZhZGUnKTtcbiAgICAgICAgICB0YXJnZXQucXVlcnlTZWxlY3RvcignLnNlY3Rpb25fX2NvbnRlbnQnKS5jbGFzc0xpc3QuYWRkKCdhbmltYXRlLWZhZGUnKTtcbiAgICAgICAgICBuZXcgU2Nyb2xsKGNvbW11bml0eSwgaXNEb3duLCA5MDAsICdjZW50ZXInKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoaXNEb3duKSB7XG4gICAgICAgICAgICBuZXcgU2Nyb2xsKGNvbW11bml0eSwgaXNEb3duLCA5MDAsICdjZW50ZXInKTtcbiAgICAgICAgICAgIGNvbW11bml0eS5jbGFzc0xpc3QuYWRkKCdhbmltYXRlLWZhZGUnKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV3IFNjcm9sbChzZWN0aW9uc1tjdXJyZW50XSwgaXNEb3duLCA2MDApO1xuICAgICAgICAgICAgY29tbXVuaXR5LmNsYXNzTGlzdC5hZGQoJ2FuaW1hdGUtb2ZmJyk7XG4gICAgICAgICAgICBzZWN0aW9uc1tjdXJyZW50XS5xdWVyeVNlbGVjdG9yKCcuc2VjdGlvbl9fY29udGVudCcpLmNsYXNzTGlzdC5yZW1vdmUoJ2FuaW1hdGUtZmFkZScpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICBzZWN0aW9uc1tjdXJyZW50XS5jbGFzc0xpc3QuY29udGFpbnMoJ3NlY3Rpb24tLWJhY2tzdG9yeScpIHx8XG4gICAgICAgIHRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ3NlY3Rpb24tLWJhY2tzdG9yeScpICYmICFpc0Rvd24gfHxcbiAgICAgICAgdGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnc2VjdGlvbi0td29ybGQnKSAmJiAhaXNEb3duXG4gICAgICApIHtcbiAgICAgICAgbGV0IHBsYWNlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNlY3Rpb24tLWJhY2tzdG9yeSAucGxhY2UnKTtcbiAgICAgICAgaWYgKHBsYWNlLmNsYXNzTGlzdC5jb250YWlucygnYW5pbWF0ZS1vZmYnKSkge1xuICAgICAgICAgIGlmIChpc0Rvd24pIHtcbiAgICAgICAgICAgIHBsYWNlLmNsYXNzTGlzdC5yZW1vdmUoJ2FuaW1hdGUtb2ZmJyk7XG4gICAgICAgICAgICBuZXcgQW5pbWF0ZUZhZGUoc2VjdGlvbnNbY3VycmVudF0ucXVlcnlTZWxlY3RvcignLnNlY3Rpb25fX2NvbnRlbnQnKSwgcGxhY2UsIGlzRG93biwgOTAwKTtcbiAgICAgICAgICAgIG5ldyBTY3JvbGwocGxhY2UsIGlzRG93biwgOTAwLCAnY2VudGVyJyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNlY3Rpb25zW2N1cnJlbnRdLmNsYXNzTGlzdC5yZW1vdmUoJ2FuaW1hdGUtb2ZmJyk7XG4gICAgICAgICAgICBuZXcgU2Nyb2xsKHRhcmdldCwgaXNEb3duLCA2MDApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChwbGFjZS5jbGFzc0xpc3QuY29udGFpbnMoJ2FuaW1hdGUtZmFkZScpKSB7XG4gICAgICAgICAgcGxhY2UuY2xhc3NMaXN0LnJlbW92ZSgnYW5pbWF0ZS1mYWRlJyk7XG4gICAgICAgICAgdGFyZ2V0LnF1ZXJ5U2VsZWN0b3IoJy5zZWN0aW9uX19jb250ZW50JykuY2xhc3NMaXN0LmFkZCgnYW5pbWF0ZS1mYWRlJyk7XG4gICAgICAgICAgbmV3IFNjcm9sbChwbGFjZSwgaXNEb3duLCA5MDAsICdjZW50ZXInKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoaXNEb3duKSB7XG4gICAgICAgICAgICBuZXcgU2Nyb2xsKHBsYWNlLCBpc0Rvd24sIDkwMCwgJ2NlbnRlcicpO1xuICAgICAgICAgICAgcGxhY2UuY2xhc3NMaXN0LmFkZCgnYW5pbWF0ZS1mYWRlJyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5ldyBTY3JvbGwoc2VjdGlvbnNbY3VycmVudF0sIGlzRG93biwgNjAwKTtcbiAgICAgICAgICAgIHBsYWNlLmNsYXNzTGlzdC5hZGQoJ2FuaW1hdGUtb2ZmJyk7XG4gICAgICAgICAgICBzZWN0aW9uc1tjdXJyZW50XS5xdWVyeVNlbGVjdG9yKCcuc2VjdGlvbl9fY29udGVudCcpLmNsYXNzTGlzdC5yZW1vdmUoJ2FuaW1hdGUtZmFkZScpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXcgU2Nyb2xsKHRhcmdldCwgaXNEb3duLCA2MDApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd3aGVlbCcsIFdoZWVsLCB7cGFzc2l2ZTogZmFsc2V9KTtcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNld2hlZWwnLCBXaGVlbCwge3Bhc3NpdmU6IGZhbHNlfSk7XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdET01Nb3VzZVNjcm9sbCcsIFdoZWVsLCB7cGFzc2l2ZTogZmFsc2V9KTtcblxuICBsZXQgaWZyYW1lcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2lmcmFtZScpO1xuICBpZnJhbWVzLmZvckVhY2goKGlmcmFtZSkgPT4ge1xuICAgIGlmcmFtZS5hZGRFdmVudExpc3RlbmVyKCd3aGVlbCcsIFdoZWVsLCB7cGFzc2l2ZTogZmFsc2V9KTtcbiAgICBpZnJhbWUuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V3aGVlbCcsIFdoZWVsLCB7cGFzc2l2ZTogZmFsc2V9KTtcbiAgICBpZnJhbWUuYWRkRXZlbnRMaXN0ZW5lcignRE9NTW91c2VTY3JvbGwnLCBXaGVlbCwge3Bhc3NpdmU6IGZhbHNlfSk7XG4gIH0pO1xuXG4gIC8vIGRvY3VtZW50Lm9ua2V5dXAgPSBmdW5jdGlvbihlKXtcbiAgLy8gICBjb25zb2xlLmxvZygnS2V5IDogJyArIGUuY29kZSk7XG4gIC8vICAgbGV0IGN1cnJlbnQgPSBBcnJheS5mcm9tKHNlY3Rpb25zKS5maW5kSW5kZXgoIHNlY3Rpb24gPT4gc2VjdGlvbi5jbGFzc0xpc3QuY29udGFpbnMoJ2FuaW1hdGUnKSApO1xuICAvLyAgIGxldCB0YXJnZXQ7XG4gIC8vICAgaWYgKGUuY29kZSA9PT0gKCdTcGFjZScgfHwgJ0Fycm93RG93bicgfHwgJ1BhZ2VEb3duJyB8fCAnRG93bicpKSB7XG4gIC8vICAgICB0YXJnZXQgPSBjdXJyZW50ICsgMSA8IHNlY3Rpb25zLmxlbmd0aCA/IEFycmF5LmZyb20oc2VjdGlvbnMpW2N1cnJlbnQgKyAxXSA6IEFycmF5LmZyb20oc2VjdGlvbnMpW2N1cnJlbnRdO1xuICAvLyAgICAgbmV3IFNjcm9sbCh0YXJnZXQsIHRydWUpO1xuICAvLyAgIH0gZWxzZSBpZiAoZS5jb2RlID09PSAoJ0Fycm93VXAnIHx8ICdQYWdlVXAnIHx8ICdVcCcpKSB7XG4gIC8vICAgICB0YXJnZXQgPSBjdXJyZW50ID4gMCA/IEFycmF5LmZyb20oc2VjdGlvbnMpW2N1cnJlbnQgLSAxXSA6IEFycmF5LmZyb20oc2VjdGlvbnMpWzBdO1xuICAvLyAgICAgbmV3IFNjcm9sbCh0YXJnZXQsIGZhbHNlKTtcbiAgLy8gICB9XG4gIC8vIH07XG5cbiAgbGV0IHNwbGlkZSA9IG5ldyBTcGxpZGUoICcuc3BsaWRlJywge1xuICAgIHBlclBhZ2U6IDMsXG4gICAgcGVyTW92ZTogMSxcbiAgICBnYXAgICAgOiAnMzJweCcsXG4gICAgYnJlYWtwb2ludHM6IHtcbiAgICAgIDgyMDoge1xuICAgICAgICBwZXJQYWdlOiAyXG4gICAgICB9LFxuICAgICAgNTIwOiB7XG4gICAgICAgIHBlclBhZ2U6IDFcbiAgICAgIH0sXG4gICAgfSxcbiAgfSApO1xuICBzcGxpZGUubW91bnQoKTtcbn07XG5cbiJdfQ==
