/*!
 * gulp-nunjucks-sass-template
 * A Gulp 4 template including SCSS, Nunjucks, JS and more
 *
 * Url: https://github.com/DefaultSimon
 * Author: Simon Goričar
 * Copyright 2022. License: MIT
 */
window.onload=function(){const e=new IntersectionObserver(function(e,t){e.forEach(e=>{e.isIntersecting?(e.target.classList.remove("animate-off"),e.target.classList.add("animate")):(e.target.classList.remove("animate"),e.target.classList.add("animate-off"))})},{root:null,rootMargin:"24px",threshold:.5});function t(e){let t=window.innerWidth/2,n=window.innerHeight/2,s=e.clientX,a=e.clientY;this.querySelectorAll(".parallaxed").forEach((e,i)=>{let o=-.001*i-.001;e.style.marginLeft=`${(s-t)*o}%`,e.style.marginTop=`${(a-n)*o}%`})}document.querySelectorAll("section").forEach(t=>e.observe(t)),document.querySelectorAll(".parallax").forEach(e=>{e.addEventListener("mousemove",t)});const n=document.querySelectorAll(".section");let s=!1;function a(e,t,n,a){s=!0;let i=null,o=window.pageYOffset||document.documentElement.scrollTop,c=window.innerHeight,r=0,l=0;r="center"===a?t?(c+e.offsetHeight)/2:e.parentElement.getBoundingClientRect().top+(c+e.offsetHeight)/2:"bottom"===a?e.parentElement.getBoundingClientRect().bottom-c:e.getBoundingClientRect().top,console.log(o,r,l,e),function(){const e=["ms","moz","webkit","o"];for(let t=0,n=e.length;t<n&&!window.requestAnimationFrame;t++)window.requestAnimationFrame=window[e[t]+"RequestAnimationFrame"],window.cancelAnimationFrame=window[e[t]+"CancelAnimationFrame"]||window[e[t]+"CancelRequestAnimationFrame"]}(),window.requestAnimationFrame(function a(c){i||(i=c||(new Date).getTime());let d=(c-i)/+n;d=+d.toFixed(2);let m=+(f=d,f*(2-f)).toFixed(2);var f;l=+(l=o+r*m).toFixed(2),window.scrollTo(0,l),isNaN(l)||l<0||!t&&l<=0||!t&&l<=o+r+1||t&&l>=o+r||t&&l>=document.body.clientHeight-window.innerHeight-1||l>document.body.clientHeight-window.innerHeight?(cancelAnimationFrame(i),e&&e.focus(),l=0,s=!1):window.requestAnimationFrame(a)})}function i(e,t,n,s){!n&&t.offsetHeight<window.innerHeight||(e.classList.add("animate-fade"),t.classList.remove("animate-fade"))}function o(e){e.preventDefault();let t=e.deltaY>0;if(!s){let e,o=Array.from(n).findIndex(e=>e.classList.contains("animate"));if(e=t?o+1<n.length?Array.from(n)[o+1]:Array.from(n)[o]:o>0?Array.from(n)[o-1]:Array.from(n)[0],console.log(n[o],e),n[o].classList.contains("section--variants")){let n=document.querySelectorAll(".section--variants .variant");t&&n[n.length-1].classList.contains("variant--current")||!t&&n[0].classList.contains("variant--current")?new a(e,t,600):new function(e,t,n){s=!0;let a=e.querySelector(".section__variants").getBoundingClientRect().top,i=e.querySelector("ul"),o=e.querySelector(".variant--current"),c=n?Array.from(t).findIndex(e=>e.classList.contains("variant--current"))+1:Array.from(t).findIndex(e=>e.classList.contains("variant--current"))-1,r=Array.from(t)[c].getBoundingClientRect().top,l=0;if(i.style.transform){let e=window.getComputedStyle(i);l=new DOMMatrixReadOnly(e.transform).m42}console.log(a,i.getBoundingClientRect().top,r,l),o.classList.remove("variant--current"),Array.from(t)[c].classList.add("variant--current"),i.style.transform=`translateY(${a-r+l}px)`,setTimeout(()=>s=!1,300)}(document.querySelector(".section--variants"),n,t)}else if(n[o].classList.contains("section--world")){let i=document.querySelectorAll(".section--world .section__slide");t&&i[i.length-1].classList.contains("show")||!t&&i[0].classList.contains("show")?new a(e,t,600):new function(e,t,n){s=!0;let a=Array.from(t).findIndex(e=>e.classList.contains("show")),i=n?a+1:a-1;Array.from(t)[a].classList.remove("show"),Array.from(t)[i].classList.add("show"),e.setAttribute("data-slide",+i),setTimeout(()=>s=!1,300)}(n[o],i,t)}else if(n[o].classList.contains("section--roadmap")||e.classList.contains("section--roadmap")&&!t||e.classList.contains("section--opportunities")&&!t){let s=document.querySelector(".section--roadmap .expertise");s.classList.contains("animate-off")?t?(new i(n[o].querySelector(".section__content"),s,t,900),new a(s,t,900,"bottom"),s.classList.remove("animate-off")):(e.querySelector(".community").classList.remove("animate-fade"),new a(e.querySelector(".community"),t,900,"center")):s.classList.contains("animate-fade")?(s.classList.remove("animate-fade"),e.querySelector(".section__content").classList.add("animate-fade"),new a(s,t,900,"bottom")):t?(new a(e,t,600),s.classList.add("animate-fade")):(new a(n[o],t,600),s.classList.add("animate-off"),n[o].querySelector(".section__content").classList.remove("animate-fade"))}else if(n[o].classList.contains("section--opportunities")||e.classList.contains("section--opportunities")&&!t||e.classList.contains("section--backstory")&&!t){let s=document.querySelector(".section--opportunities .community");s.classList.contains("animate-off")?t?(s.classList.remove("animate-off"),new i(n[o].querySelector(".section__content"),s,t,900),new a(s,t,900,"center")):(e.querySelector(".place").classList.remove("animate-fade"),new a(e.querySelector(".place"),t,900,"center")):s.classList.contains("animate-fade")?(s.classList.remove("animate-fade"),e.querySelector(".section__content").classList.add("animate-fade"),new a(s,t,900,"center")):t?(new a(s,t,900,"center"),s.classList.add("animate-fade")):(new a(n[o],t,600),s.classList.add("animate-off"),n[o].querySelector(".section__content").classList.remove("animate-fade"))}else if(n[o].classList.contains("section--backstory")||e.classList.contains("section--backstory")&&!t||e.classList.contains("section--world")&&!t){let s=document.querySelector(".section--backstory .place");s.classList.contains("animate-off")?t?(s.classList.remove("animate-off"),new i(n[o].querySelector(".section__content"),s,t,900),new a(s,t,900,"center")):(n[o].classList.remove("animate-off"),new a(e,t,600)):s.classList.contains("animate-fade")?(s.classList.remove("animate-fade"),e.querySelector(".section__content").classList.add("animate-fade"),new a(s,t,900,"center")):t?(new a(s,t,900,"center"),s.classList.add("animate-fade")):(new a(n[o],t,600),s.classList.add("animate-off"),n[o].querySelector(".section__content").classList.remove("animate-fade"))}else new a(e,t,600)}}window.addEventListener("wheel",o,{passive:!1}),window.addEventListener("mousewheel",o,{passive:!1}),window.addEventListener("DOMMouseScroll",o,{passive:!1}),document.querySelectorAll("iframe").forEach(e=>{e.addEventListener("wheel",o,{passive:!1}),e.addEventListener("mousewheel",o,{passive:!1}),e.addEventListener("DOMMouseScroll",o,{passive:!1})}),new Splide(".splide",{perPage:3,perMove:1,gap:"32px",breakpoints:{820:{perPage:2},520:{perPage:1}}}).mount()};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
