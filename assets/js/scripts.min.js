/*!
 * gulp-nunjucks-sass-template
 * A Gulp 4 template including SCSS, Nunjucks, JS and more
 *
 * Url: https://github.com/DefaultSimon
 * Author: Simon Goričar
 * Copyright 2022. License: MIT
 */
window.onload=function(){const e=document.querySelectorAll(".section");let t=document.querySelectorAll(".section--variants .variant"),n=!1,o=0,a=!0;const s=new IntersectionObserver(function(e,t){e.forEach(e=>{e.isIntersecting?(e.target.classList.remove("animate-off"),e.target.classList.add("animate")):(e.target.classList.remove("animate"),e.target.classList.add("animate-off"))})},{root:null,rootMargin:"10%",threshold:.5});function i(e,t,o,a){console.log(e,t),n=!0;let s=null,i=window.pageYOffset||document.documentElement.scrollTop,c=window.innerHeight,r=0,l=0;r="center"===a?t?(c+e.offsetHeight)/2:e.parentElement.getBoundingClientRect().top+(c+e.offsetHeight)/2:"bottom"===a?e.parentElement.getBoundingClientRect().bottom-c:e.getBoundingClientRect().top,function(){const e=["ms","moz","webkit","o"];for(let t=0,n=e.length;t<n&&!window.requestAnimationFrame;t++)window.requestAnimationFrame=window[e[t]+"RequestAnimationFrame"],window.cancelAnimationFrame=window[e[t]+"CancelAnimationFrame"]||window[e[t]+"CancelRequestAnimationFrame"]}(),window.requestAnimationFrame(function a(d){s||(s=d||(new Date).getTime());let m=(d-s)/+o;m=+m.toFixed(2);let u=+(f=m,f*(2-f)).toFixed(2);var f;l=+(l=i+r*u).toFixed(2),window.scrollTo(0,l),console.log(isNaN(l),l<0,!t&&l<=0,!t&&l<=i+r+1,t&&l>=i+r,t&&document.body.getBoundingClientRect().bottom-1<c,t&&e.getBoundingClientRect().top.toFixed(0)-1>=0,e.getBoundingClientRect().top.toFixed(0)+1),isNaN(l)||l<0||!t&&l<=0||!t&&l<=i+r+1||t&&l>=i+r||t&&document.body.getBoundingClientRect().bottom-1<c||t&&e.getBoundingClientRect().top.toFixed(0)-1<=0?(cancelAnimationFrame(s),e&&e.focus(),setTimeout(()=>{n=!1},300)):window.requestAnimationFrame(a)})}function c(e,t,n){!n&&t.offsetHeight<window.innerHeight||(e.classList.add("animate-fade"),t.classList.remove("animate-fade"))}function r(o,a){if(o.preventDefault(),!n){let s,r=Array.from(e).findIndex(e=>e.classList.contains("animate")),l=a||o.deltaY>0;if(s=l?r+1<e.length?Array.from(e)[r+1]:Array.from(e)[r]:r>0?Array.from(e)[r-1]:Array.from(e)[0],console.log(r,e.length,e[r].getBoundingClientRect().top,l,a),e[r].classList.contains("section--variants"))l&&t[t.length-1].classList.contains("variant--current")||!l&&t[0].classList.contains("variant--current")?new i(s,l,600):(e[r].scrollIntoView({behavior:"auto"}),new function(e,t,o){n=!0;let a=e.querySelector(".section__variants").getBoundingClientRect().top,s=e.querySelector("ul"),i=e.querySelector(".variant--current"),c=o?Array.from(t).findIndex(e=>e.classList.contains("variant--current"))+1:Array.from(t).findIndex(e=>e.classList.contains("variant--current"))-1,r=Array.from(t)[c].getBoundingClientRect().top,l=0;if(s.style.transform){let e=window.getComputedStyle(s);l=new DOMMatrixReadOnly(e.transform).m42}i.classList.remove("variant--current"),Array.from(t)[c].classList.add("variant--current"),s.style.transform=`translateY(${a-r+l}px)`,setTimeout(()=>n=!1,300)}(document.querySelector(".section--variants"),t,l));else if(e[r].classList.contains("section--world")){let t=document.querySelectorAll(".section--world .section__slide");l&&t[t.length-1].classList.contains("show")||!l&&t[0].classList.contains("show")?new i(s,l,600):(e[r].scrollIntoView({behavior:"auto"}),new function(e,t,o){n=!0;let a=Array.from(t).findIndex(e=>e.classList.contains("show")),s=o?a+1:a-1;Array.from(t)[a].classList.remove("show"),Array.from(t)[s].classList.add("show"),e.setAttribute("data-slide",+s),setTimeout(()=>n=!1,300)}(e[r],t,l))}else if(e[r].classList.contains("section--roadmap")||s.classList.contains("section--roadmap")&&!l||s.classList.contains("section--opportunities")&&!l){let t=document.querySelector(".section--roadmap .expertise");t.classList.contains("animate-off")?l?(new c(e[r].querySelector(".section__content"),t,l),new i(t,l,900,"bottom"),t.classList.remove("animate-off")):(s.querySelector(".community").classList.remove("animate-fade"),new i(s.querySelector(".community"),l,900,"center")):t.classList.contains("animate-fade")?(t.classList.remove("animate-fade"),s.querySelector(".section__content").classList.add("animate-fade"),new i(t,l,900,"bottom")):l?(t.classList.add("animate-fade"),new i(s,l,600)):(new i(e[r],l,600),t.classList.add("animate-off"),e[r].querySelector(".section__content").classList.remove("animate-fade"))}else if(e[r].classList.contains("section--opportunities")||s.classList.contains("section--opportunities")&&!l||s.classList.contains("section--backstory")&&!l){let t=document.querySelector(".section--opportunities .community");t.classList.contains("animate-off")?l?(t.classList.remove("animate-off"),new c(e[r].querySelector(".section__content"),t,l),new i(t,l,900,"center")):(s.querySelector(".place").classList.remove("animate-fade"),new i(s.querySelector(".place"),l,900,"center")):t.classList.contains("animate-fade")?(t.classList.remove("animate-fade"),s.querySelector(".section__content").classList.add("animate-fade"),new i(t,l,900,"center")):l?(new i(s,l,600),t.classList.add("animate-fade")):(new i(e[r],l,600),t.classList.add("animate-off"),e[r].querySelector(".section__content").classList.remove("animate-fade"))}else if(e[r].classList.contains("section--backstory")||s.classList.contains("section--backstory")&&!l||s.classList.contains("section--world")&&!l){let t=document.querySelector(".section--backstory .place");t.classList.contains("animate-off")?l?(t.classList.remove("animate-off"),new c(e[r].querySelector(".section__content"),t,l),new i(t,l,900,"center")):(e[r].classList.remove("animate-off"),new i(s,l,600)):t.classList.contains("animate-fade")?(t.classList.remove("animate-fade"),s.querySelector(".section__content").classList.add("animate-fade"),new i(t,l,900,"center")):l?(new i(s,l,600),t.classList.add("animate-fade")):(new i(e[r],l,600),t.classList.add("animate-off"),e[r].querySelector(".section__content").classList.remove("animate-fade"))}else console.log(s),new i(s,l,600)}}function l(e){let t=window.innerWidth/2,n=window.innerHeight/2,o=e.clientX,a=e.clientY;this.querySelectorAll(".parallaxed").forEach((e,s)=>{let i=-.001*s-.001;e.style.marginLeft=`${(o-t)*i}%`,e.style.marginTop=`${(a-n)*i}%`})}e.forEach(e=>s.observe(e)),window.addEventListener("wheel",r,{passive:!1}),window.addEventListener("mousewheel",r,{passive:!1}),window.addEventListener("DOMMouseScroll",r,{passive:!1}),window.addEventListener("touchmove",e=>{},{passive:!1}),window.addEventListener("scroll",e=>{let t=document.body.getBoundingClientRect().top;new r(e,a=t-o<0),o=t},{passive:!1}),document.querySelectorAll(".parallax").forEach(e=>{e.addEventListener("mousemove",l)}),new Splide(".road",{perPage:3,perMove:1,breakpoints:{920:{perPage:2},520:{perPage:1}}}).mount(),new Splide(".section__articles",{perPage:3,perMove:1,gap:"32px",breakpoints:{640:{gap:"16px",perPage:2},520:{gap:"16px",perPage:1}}}).mount(),new Splide(".section__opportunities",{perPage:4,perMove:1,gap:"32px",breakpoints:{920:{perPage:2},640:{perPage:1}}}).mount()};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
