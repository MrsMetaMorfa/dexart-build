/*!
 * gulp-nunjucks-sass-template
 * A Gulp 4 template including SCSS, Nunjucks, JS and more
 *
 * Url: https://github.com/DefaultSimon
 * Author: Simon Goričar
 * Copyright 2022. License: MIT
 */
window.onload=function(){const e=new IntersectionObserver(function(e,t){e.forEach(e=>{e.isIntersecting?(e.target.classList.remove("animate-off"),e.target.classList.add("animate")):(e.target.classList.remove("animate"),e.target.classList.add("animate-off"))})},{root:null,rootMargin:"24px",threshold:.5});document.querySelectorAll("section").forEach(t=>e.observe(t)),document.querySelector(".section--top").addEventListener("mousemove",function(e){let t=window.innerWidth/2,n=window.innerHeight/2,o=e.clientX,i=e.clientY;this.querySelectorAll(".parallaxed").forEach((e,a)=>{let s=-.001*a-.001;e.style.marginLeft=`${(o-t)*s}%`,e.style.marginTop=`${(i-n)*s}%`})});const t=document.querySelectorAll(".section");function n(e,t){let n=null,o=window.pageYOffset||document.documentElement.scrollTop,i=e.getBoundingClientRect().top,a=0;console.log(o,i,a),function(){const e=["ms","moz","webkit","o"];for(let t=0,n=e.length;t<n&&!window.requestAnimationFrame;t++)window.requestAnimationFrame=window[e[t]+"RequestAnimationFrame"],window.cancelAnimationFrame=window[e[t]+"CancelAnimationFrame"]||window[e[t]+"CancelRequestAnimationFrame"]}(),window.requestAnimationFrame(function s(r){n||(n=r||(new Date).getTime());let c=(r-n)/600;c=+c.toFixed(2);let l=+(d=c,d*(2-d)).toFixed(2);var d;a=+(a=o+i*l).toFixed(2),window.scrollTo(0,a),console.log(o,i,a,l,document.body.clientHeight-window.innerHeight),a<0||!t&&a<=0||!t&&a<=o+i+1||t&&a>=o+i||t&&a>=document.body.clientHeight-window.innerHeight-1||a>document.body.clientHeight-window.innerHeight?(cancelAnimationFrame(n),e&&e.focus(),a=0):window.requestAnimationFrame(s)})}function o(e,t,n){let o=null,i=window.pageYOffset||document.documentElement.scrollTop,a=window.innerHeight,s=n?(a+t.offsetHeight)/2:e.getBoundingClientRect().top,r=0;console.log(i,a,t.offsetHeight,t.getBoundingClientRect().top,s,r),t.classList.add("animate"),function(){const e=["ms","moz","webkit","o"];for(let t=0,n=e.length;t<n&&!window.requestAnimationFrame;t++)window.requestAnimationFrame=window[e[t]+"RequestAnimationFrame"],window.cancelAnimationFrame=window[e[t]+"CancelAnimationFrame"]||window[e[t]+"CancelRequestAnimationFrame"]}(),window.requestAnimationFrame(function e(a){o||(o=a||(new Date).getTime());let c=(a-o)/900;c=+c.toFixed(2);let l=+(d=c,d*(2-d)).toFixed(2);var d;r=+(r=i+s*l).toFixed(2),window.scrollTo(0,r),console.log(i,s,r,l,document.body.clientHeight-window.innerHeight),r<0||!n&&r<=0||!n&&r<=i+s+1||n&&r>=i+s||n&&r>=document.body.clientHeight-window.innerHeight-1||r>document.body.clientHeight-window.innerHeight?(cancelAnimationFrame(o),t&&t.focus(),r=0):window.requestAnimationFrame(e)})}function i(e){e.preventDefault();let i,a=Array.from(t).findIndex(e=>e.classList.contains("animate"));if(i=e.deltaY>0?a+1<t.length?Array.from(t)[a+1]:Array.from(t)[a]:a>0?Array.from(t)[a-1]:Array.from(t)[0],t[a].classList.contains("section--variants")){let t=document.querySelectorAll(".section--variants .variant");e.deltaY>0&&t[t.length-1].classList.contains("variant--current")||e.deltaY<0&&t[0].classList.contains("variant--current")?new n(i,e.deltaY>0):new function(e,t,n){let o=e.querySelector(".section__variants").getBoundingClientRect().top,i=e.querySelector("ul"),a=e.querySelector(".variant--current"),s=n?Array.from(t).findIndex(e=>e.classList.contains("variant--current"))+1:Array.from(t).findIndex(e=>e.classList.contains("variant--current"))-1,r=Array.from(t)[s].getBoundingClientRect().top,c=0;if(i.style.transform){let e=window.getComputedStyle(i);c=new DOMMatrixReadOnly(e.transform).m42}console.log(o,i.getBoundingClientRect().top,r,c),a.classList.remove("variant--current"),Array.from(t)[s].classList.add("variant--current"),i.style.transform=`translateY(${o-r+c}px)`}(document.querySelector(".section--variants"),t,e.deltaY>0)}else if(t[a].classList.contains("section--world")){let t=document.querySelectorAll(".section--world .section__slide");e.deltaY>0&&t[t.length-1].classList.contains("show")||e.deltaY<0&&t[0].classList.contains("show")?new n(i,e.deltaY>0):new function(e,t){let n=Array.from(e).findIndex(e=>e.classList.contains("show")),o=t?n+1:n-1;Array.from(e)[n].classList.remove("show"),Array.from(e)[o].classList.add("show")}(t,e.deltaY>0)}else if(t[a].classList.contains("section--backstory")&&e.deltaY>0||i.classList.contains("section--backstory")&&e.deltaY<0||document.querySelector(".animate").classList.contains("place")){let s=document.querySelector(".section--backstory .place");if(t[a].classList.contains("section--backstory"))new o(document.querySelector(".section--backstory"),s,e.deltaY>0);else{let o=e.deltaY>0?Array.from(t).findIndex(e=>e.classList.contains("section--opportunities")):Array.from(t).findIndex(e=>e.classList.contains("section--backstory"));new n(i=Array.from(t)[o],e.deltaY>0),s.classList.remove("animate")}}else if(t[a].classList.contains("section--opportunities")&&e.deltaY>0||i.classList.contains("section--opportunities")&&e.deltaY<0||document.querySelector(".animate").classList.contains("community")){let s=document.querySelector(".section--opportunities .community");if(t[a].classList.contains("section--opportunities"))new o(document.querySelector(".section--opportunities"),s,e.deltaY>0);else{let o=e.deltaY>0?Array.from(t).findIndex(e=>e.classList.contains("section--roadmap")):Array.from(t).findIndex(e=>e.classList.contains("section--opportunities"));new n(i=Array.from(t)[o],e.deltaY>0),s.classList.remove("animate")}}else if(t[a].classList.contains("section--roadmap")&&e.deltaY>0||i.classList.contains("section--roadmap")&&e.deltaY<0||document.querySelector(".animate").classList.contains("expertise")){let o=document.querySelector(".section--roadmap .expertise");if(t[a].classList.contains("section--roadmap"))new function(e,t,n){let o=null,i=window.pageYOffset||document.documentElement.scrollTop,a=window.innerHeight,s=n?e.offsetHeight-a:t.getBoundingClientRect().bottom-a,r=0;console.log(i,t.offsetHeight,t.getBoundingClientRect().bottom,s,r),t.classList.add("animate"),function(){const e=["ms","moz","webkit","o"];for(let t=0,n=e.length;t<n&&!window.requestAnimationFrame;t++)window.requestAnimationFrame=window[e[t]+"RequestAnimationFrame"],window.cancelAnimationFrame=window[e[t]+"CancelAnimationFrame"]||window[e[t]+"CancelRequestAnimationFrame"]}(),window.requestAnimationFrame(function e(a){o||(o=a||(new Date).getTime());let c=(a-o)/900;c=+c.toFixed(2);let l=+(d=c,d*(2-d)).toFixed(2);var d;r=+(r=i+s*l).toFixed(2),window.scrollTo(0,r),console.log(i,s,r,l,document.body.clientHeight-window.innerHeight),r<0||!n&&r<=0||!n&&r<=i+s+1||n&&r>=i+s||n&&r>=document.body.clientHeight-window.innerHeight-1||r>document.body.clientHeight-window.innerHeight?(cancelAnimationFrame(o),t&&t.focus(),r=0):window.requestAnimationFrame(e)})}(document.querySelector(".section--roadmap"),o,e.deltaY>0);else{let a=e.deltaY>0?Array.from(t).findIndex(e=>e.classList.contains("section--partners")):Array.from(t).findIndex(e=>e.classList.contains("section--roadmap"));new n(i=Array.from(t)[a],e.deltaY>0),o.classList.remove("animate")}}else new n(i,e.deltaY>0)}window.addEventListener("wheel",i,{passive:!1}),window.addEventListener("mousewheel",i,{passive:!1}),window.addEventListener("DOMMouseScroll",i,{passive:!1}),document.onkeyup=function(e){console.log("Key : "+e.code);let o,i=Array.from(t).findIndex(e=>e.classList.contains("animate"));"Space"===e.code?new n(o=i+1<t.length?Array.from(t)[i+1]:Array.from(t)[i],!0):"ArrowUp"===e.code&&new n(o=i>0?Array.from(t)[i-1]:Array.from(t)[0],!1)},new Splide(".splide",{perPage:3,perMove:1,gap:"32px",breakpoints:{820:{perPage:2},520:{perPage:1}}}).mount()};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
