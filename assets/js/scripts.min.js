/*!
 * gulp-nunjucks-sass-template
 * A Gulp 4 template including SCSS, Nunjucks, JS and more
 *
 * Url: https://github.com/DefaultSimon
 * Author: Simon Goričar
 * Copyright 2022. License: MIT
 */
window.onload=function(){const e=new IntersectionObserver(function(e,t){e.forEach(e=>{e.isIntersecting?(e.target.classList.remove("animate-off"),e.target.classList.add("animate")):(e.target.classList.remove("animate"),e.target.classList.add("animate-off"))})},{root:null,rootMargin:"10%",threshold:.5});function t(e){let t=window.innerWidth/2,n=window.innerHeight/2,o=e.clientX,s=e.clientY;this.querySelectorAll(".parallaxed").forEach((e,a)=>{let i=-.001*a-.001;e.style.marginLeft=`${(o-t)*i}%`,e.style.marginTop=`${(s-n)*i}%`})}document.querySelectorAll(".section").forEach(t=>e.observe(t)),document.querySelectorAll(".parallax").forEach(e=>{e.addEventListener("mousemove",t)});const n=document.querySelectorAll(".section");let o=!1;function s(e,t,n,s){console.log(e,t),o=!0;let a=null,i=window.pageYOffset||document.documentElement.scrollTop,c=window.innerHeight,r=0,l=0;r="center"===s?t?(c+e.offsetHeight)/2:e.parentElement.getBoundingClientRect().top+(c+e.offsetHeight)/2:"bottom"===s?e.parentElement.getBoundingClientRect().bottom-c:e.getBoundingClientRect().top,function(){const e=["ms","moz","webkit","o"];for(let t=0,n=e.length;t<n&&!window.requestAnimationFrame;t++)window.requestAnimationFrame=window[e[t]+"RequestAnimationFrame"],window.cancelAnimationFrame=window[e[t]+"CancelAnimationFrame"]||window[e[t]+"CancelRequestAnimationFrame"]}(),window.requestAnimationFrame(function s(d){a||(a=d||(new Date).getTime());let m=(d-a)/+n;m=+m.toFixed(2);let u=+(f=m,f*(2-f)).toFixed(2);var f;l=+(l=i+r*u).toFixed(2),window.scrollTo(0,l),console.log(isNaN(l),l<0,!t&&l<=0,!t&&l<=i+r+1,t&&l>=i+r,t&&l+c+c/6>document.body.clientHeight,t&&e.getBoundingClientRect().bottom<document.body.clientHeight,e.getBoundingClientRect().bottom,document.body.clientHeight),isNaN(l)||l<0||!t&&l<=0||!t&&l<=i+r+1||t&&l>=i+r||t&&e.getBoundingClientRect().bottom<document.body.clientHeight?(cancelAnimationFrame(a),e&&e.focus(),setTimeout(()=>{o=!1,console.log(l,o,e)},300)):window.requestAnimationFrame(s)})}function a(e,t,n){!n&&t.offsetHeight<window.innerHeight||(e.classList.add("animate-fade"),t.classList.remove("animate-fade"))}function i(e,t){if(e.preventDefault(),!o){let i,c=Array.from(n).findIndex(e=>e.classList.contains("animate")),r=e.deltaY>0||n[c].getBoundingClientRect().top<0;if(console.log(n[c].getBoundingClientRect().top,r,t),i=r?c+1<=n.length?Array.from(n)[c+1]:Array.from(n)[c]:c>0?Array.from(n)[c-1]:Array.from(n)[0],n[c].classList.contains("section--variants")){let e=document.querySelectorAll(".section--variants .variant");r&&e[e.length-1].classList.contains("variant--current")||!r&&e[0].classList.contains("variant--current")?new s(i,r,600):(console.log(n[c],n[c].getBoundingClientRect().top),n[c].scrollTo({top:0,left:0,behavior:"instant"}),new function(e,t,n){o=!0;let s=e.querySelector(".section__variants").getBoundingClientRect().top,a=e.querySelector("ul"),i=e.querySelector(".variant--current"),c=n?Array.from(t).findIndex(e=>e.classList.contains("variant--current"))+1:Array.from(t).findIndex(e=>e.classList.contains("variant--current"))-1,r=Array.from(t)[c].getBoundingClientRect().top,l=0;if(a.style.transform){let e=window.getComputedStyle(a);l=new DOMMatrixReadOnly(e.transform).m42}console.log(s,a.getBoundingClientRect().top,r,l),i.classList.remove("variant--current"),Array.from(t)[c].classList.add("variant--current"),a.style.transform=`translateY(${s-r+l}px)`,setTimeout(()=>o=!1,300)}(document.querySelector(".section--variants"),e,r))}else if(n[c].classList.contains("section--world")){let e=document.querySelectorAll(".section--world .section__slide");r&&e[e.length-1].classList.contains("show")||!r&&e[0].classList.contains("show")?new s(i,r,600):new function(e,t,n){o=!0;let s=Array.from(t).findIndex(e=>e.classList.contains("show")),a=n?s+1:s-1;Array.from(t)[s].classList.remove("show"),Array.from(t)[a].classList.add("show"),e.setAttribute("data-slide",+a),setTimeout(()=>o=!1,300)}(n[c],e,r)}else if(n[c].classList.contains("section--roadmap")||i.classList.contains("section--roadmap")&&!r||i.classList.contains("section--opportunities")&&!r){let e=document.querySelector(".section--roadmap .expertise");e.classList.contains("animate-off")?r?(new a(n[c].querySelector(".section__content"),e,r),new s(e,r,900,"bottom"),e.classList.remove("animate-off")):(i.querySelector(".community").classList.remove("animate-fade"),new s(i.querySelector(".community"),r,900,"center")):e.classList.contains("animate-fade")?(e.classList.remove("animate-fade"),i.querySelector(".section__content").classList.add("animate-fade"),new s(e,r,900,"bottom")):r?(new s(i,r,600),e.classList.add("animate-fade")):(new s(n[c],r,600),e.classList.add("animate-off"),n[c].querySelector(".section__content").classList.remove("animate-fade"))}else if(n[c].classList.contains("section--opportunities")||i.classList.contains("section--opportunities")&&!r||i.classList.contains("section--backstory")&&!r){let e=document.querySelector(".section--opportunities .community");e.classList.contains("animate-off")?r?(e.classList.remove("animate-off"),new a(n[c].querySelector(".section__content"),e,r),new s(e,r,900,"center")):(i.querySelector(".place").classList.remove("animate-fade"),new s(i.querySelector(".place"),r,900,"center")):e.classList.contains("animate-fade")?(e.classList.remove("animate-fade"),i.querySelector(".section__content").classList.add("animate-fade"),new s(e,r,900,"center")):r?(new s(e,r,900,"center"),e.classList.add("animate-fade")):(new s(n[c],r,600),e.classList.add("animate-off"),n[c].querySelector(".section__content").classList.remove("animate-fade"))}else if(n[c].classList.contains("section--backstory")||i.classList.contains("section--backstory")&&!r||i.classList.contains("section--world")&&!r){let e=document.querySelector(".section--backstory .place");e.classList.contains("animate-off")?r?(e.classList.remove("animate-off"),new a(n[c].querySelector(".section__content"),e,r),new s(e,r,900,"center")):(n[c].classList.remove("animate-off"),new s(i,r,600)):e.classList.contains("animate-fade")?(e.classList.remove("animate-fade"),i.querySelector(".section__content").classList.add("animate-fade"),new s(e,r,900,"center")):r?(new s(e,r,900,"center"),e.classList.add("animate-fade")):(new s(n[c],r,600),e.classList.add("animate-off"),n[c].querySelector(".section__content").classList.remove("animate-fade"))}else console.log(i),new s(i,r,600)}}window.addEventListener("wheel",i,{passive:!1}),window.addEventListener("mousewheel",i,{passive:!1}),window.addEventListener("DOMMouseScroll",i,{passive:!1}),window.addEventListener("scroll",i,{passive:!1}),new Splide(".road",{perPage:3,perMove:1,breakpoints:{920:{perPage:2},520:{perPage:1}}}).mount(),new Splide(".section__articles",{perPage:3,perMove:1,gap:"32px",breakpoints:{640:{gap:"16px",perPage:2},520:{gap:"16px",perPage:1}}}).mount(),new Splide(".section__opportunities",{perPage:4,perMove:1,gap:"32px",breakpoints:{920:{perPage:2},640:{perPage:1}}}).mount()};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
