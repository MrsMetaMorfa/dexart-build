/*!
 * gulp-nunjucks-sass-template
 * A Gulp 4 template including SCSS, Nunjucks, JS and more
 *
 * Url: https://github.com/DefaultSimon
 * Author: Simon Goričar
 * Copyright 2022. License: MIT
 */
window.onload=function(){const e=new IntersectionObserver(function(e,t){e.forEach(e=>{e.isIntersecting?(e.target.classList.remove("animate-off"),e.target.classList.add("animate")):(e.target.classList.remove("animate"),e.target.classList.add("animate-off"))})},{root:null,rootMargin:"24px",threshold:.5});function t(e){let t=window.innerWidth/2,n=window.innerHeight/2,s=e.clientX,a=e.clientY;this.querySelectorAll(".parallaxed").forEach((e,o)=>{let i=-.001*o-.001;e.style.marginLeft=`${(s-t)*i}%`,e.style.marginTop=`${(a-n)*i}%`})}document.querySelectorAll("section").forEach(t=>e.observe(t)),document.querySelectorAll(".parallax").forEach(e=>{e.addEventListener("mousemove",t)});const n=document.querySelectorAll(".section");let s=!1;function a(e,t,n,a){s=!0;let o=null,i=window.pageYOffset||document.documentElement.scrollTop,c=window.innerHeight,r=0,l=0;r="center"===a?t?(c+e.offsetHeight)/2:e.parentElement.getBoundingClientRect().top+(c+e.offsetHeight)/2:"bottom"===a?e.parentElement.getBoundingClientRect().bottom-c:e.getBoundingClientRect().top,console.log(i,r,l,e),function(){const e=["ms","moz","webkit","o"];for(let t=0,n=e.length;t<n&&!window.requestAnimationFrame;t++)window.requestAnimationFrame=window[e[t]+"RequestAnimationFrame"],window.cancelAnimationFrame=window[e[t]+"CancelAnimationFrame"]||window[e[t]+"CancelRequestAnimationFrame"]}(),window.requestAnimationFrame(function a(c){o||(o=c||(new Date).getTime());let d=(c-o)/+n;d=+d.toFixed(2);let m=+(f=d,f*(2-f)).toFixed(2);var f;l=+(l=i+r*m).toFixed(2),window.scrollTo(0,l),isNaN(l)||l<0||!t&&l<=0||!t&&l<=i+r+1||t&&l>=i+r||t&&l>=document.body.clientHeight-window.innerHeight-1||l>document.body.clientHeight-window.innerHeight?(cancelAnimationFrame(o),e&&e.focus(),l=0,s=!1):window.requestAnimationFrame(a)})}function o(e,t,n,s){!n&&t.offsetHeight<window.innerHeight||(e.classList.add("animate-fade"),t.classList.remove("animate-fade"))}function i(e,t){e.preventDefault();let i=t||e.deltaY>0;if(!s){let e,t=Array.from(n).findIndex(e=>e.classList.contains("animate"));if(e=i?t+1<n.length?Array.from(n)[t+1]:Array.from(n)[t]:t>0?Array.from(n)[t-1]:Array.from(n)[0],console.log(n[t],e),n[t].classList.contains("section--variants")){let t=document.querySelectorAll(".section--variants .variant");i&&t[t.length-1].classList.contains("variant--current")||!i&&t[0].classList.contains("variant--current")?new a(e,i,600):new function(e,t,n){s=!0;let a=e.querySelector(".section__variants").getBoundingClientRect().top,o=e.querySelector("ul"),i=e.querySelector(".variant--current"),c=n?Array.from(t).findIndex(e=>e.classList.contains("variant--current"))+1:Array.from(t).findIndex(e=>e.classList.contains("variant--current"))-1,r=Array.from(t)[c].getBoundingClientRect().top,l=0;if(o.style.transform){let e=window.getComputedStyle(o);l=new DOMMatrixReadOnly(e.transform).m42}console.log(a,o.getBoundingClientRect().top,r,l),i.classList.remove("variant--current"),Array.from(t)[c].classList.add("variant--current"),o.style.transform=`translateY(${a-r+l}px)`,setTimeout(()=>s=!1,300)}(document.querySelector(".section--variants"),t,i)}else if(n[t].classList.contains("section--world")){let o=document.querySelectorAll(".section--world .section__slide");i&&o[o.length-1].classList.contains("show")||!i&&o[0].classList.contains("show")?new a(e,i,600):new function(e,t,n){s=!0;let a=Array.from(t).findIndex(e=>e.classList.contains("show")),o=n?a+1:a-1;Array.from(t)[a].classList.remove("show"),Array.from(t)[o].classList.add("show"),e.setAttribute("data-slide",+o),setTimeout(()=>s=!1,300)}(n[t],o,i)}else if(n[t].classList.contains("section--roadmap")||e.classList.contains("section--roadmap")&&!i||e.classList.contains("section--opportunities")&&!i){let s=document.querySelector(".section--roadmap .expertise");s.classList.contains("animate-off")?i?(new o(n[t].querySelector(".section__content"),s,i,900),new a(s,i,900,"bottom"),s.classList.remove("animate-off")):(e.querySelector(".community").classList.remove("animate-fade"),new a(e.querySelector(".community"),i,900,"center")):s.classList.contains("animate-fade")?(s.classList.remove("animate-fade"),e.querySelector(".section__content").classList.add("animate-fade"),new a(s,i,900,"bottom")):i?(new a(e,i,600),s.classList.add("animate-fade")):(new a(n[t],i,600),s.classList.add("animate-off"),n[t].querySelector(".section__content").classList.remove("animate-fade"))}else if(n[t].classList.contains("section--opportunities")||e.classList.contains("section--opportunities")&&!i||e.classList.contains("section--backstory")&&!i){let s=document.querySelector(".section--opportunities .community");s.classList.contains("animate-off")?i?(s.classList.remove("animate-off"),new o(n[t].querySelector(".section__content"),s,i,900),new a(s,i,900,"center")):(e.querySelector(".place").classList.remove("animate-fade"),new a(e.querySelector(".place"),i,900,"center")):s.classList.contains("animate-fade")?(s.classList.remove("animate-fade"),e.querySelector(".section__content").classList.add("animate-fade"),new a(s,i,900,"center")):i?(new a(s,i,900,"center"),s.classList.add("animate-fade")):(new a(n[t],i,600),s.classList.add("animate-off"),n[t].querySelector(".section__content").classList.remove("animate-fade"))}else if(n[t].classList.contains("section--backstory")||e.classList.contains("section--backstory")&&!i||e.classList.contains("section--world")&&!i){let s=document.querySelector(".section--backstory .place");s.classList.contains("animate-off")?i?(s.classList.remove("animate-off"),new o(n[t].querySelector(".section__content"),s,i,900),new a(s,i,900,"center")):(n[t].classList.remove("animate-off"),new a(e,i,600)):s.classList.contains("animate-fade")?(s.classList.remove("animate-fade"),e.querySelector(".section__content").classList.add("animate-fade"),new a(s,i,900,"center")):i?(new a(s,i,900,"center"),s.classList.add("animate-fade")):(new a(n[t],i,600),s.classList.add("animate-off"),n[t].querySelector(".section__content").classList.remove("animate-fade"))}else new a(e,i,600)}}window.addEventListener("wheel",i,{passive:!1}),window.addEventListener("mousewheel",i,{passive:!1}),window.addEventListener("DOMMouseScroll",i,{passive:!1});let c=0;document.body.ontouchstart=function(e){c=e.changedTouches[0].clientY},window.addEventListener("touchmove",e=>{const t=Math.round(e.changedTouches[0].screenY);c!==t&&new i(e,c-t>0)}),new Splide(".splide",{perPage:3,perMove:1,gap:"32px",breakpoints:{820:{perPage:2},520:{perPage:1}}}).mount()};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
