/*!
 * gulp-nunjucks-sass-template
 * A Gulp 4 template including SCSS, Nunjucks, JS and more
 *
 * Url: https://github.com/DefaultSimon
 * Author: Simon Goričar
 * Copyright 2022. License: MIT
 */
window.onload=function(){const e=document.querySelectorAll(".section");let t=document.querySelectorAll(".section--variants .variant"),n=!1;const o=new IntersectionObserver(function(e,t){e.forEach(e=>{e.isIntersecting?(e.target.classList.remove("animate-off"),e.target.classList.add("animate")):(e.target.classList.remove("animate"),e.target.classList.add("animate-off"))})},{root:null,rootMargin:"10%",threshold:.5});function s(e,t,o,s){console.log(e,t),n=!0;let a=null,i=window.pageYOffset||document.documentElement.scrollTop,r=window.innerHeight,c=0,l=0;c="center"===s?t?(r+e.offsetHeight)/2:e.parentElement.getBoundingClientRect().top+(r+e.offsetHeight)/2:"bottom"===s?e.parentElement.getBoundingClientRect().bottom-r:e.getBoundingClientRect().top,function(){const e=["ms","moz","webkit","o"];for(let t=0,n=e.length;t<n&&!window.requestAnimationFrame;t++)window.requestAnimationFrame=window[e[t]+"RequestAnimationFrame"],window.cancelAnimationFrame=window[e[t]+"CancelAnimationFrame"]||window[e[t]+"CancelRequestAnimationFrame"]}(),window.requestAnimationFrame(function s(d){a||(a=d||(new Date).getTime());let m=(d-a)/+o;m=+m.toFixed(2);let u=+(f=m,f*(2-f)).toFixed(2);var f;l=+(l=i+c*u).toFixed(2),window.scrollTo(0,l),console.log(isNaN(l),l<0,!t&&l<=0,!t&&l<=i+c+1,t&&l>=i+c,t&&document.body.getBoundingClientRect().bottom-1<r,t&&e.getBoundingClientRect().top.toFixed(0)-1>=0&&e.innerHeight<=r,e.getBoundingClientRect().top.toFixed(0)+1),isNaN(l)||l<0||!t&&l<=0||!t&&l<=i+c+1||t&&l>=i+c||t&&document.body.getBoundingClientRect().bottom-1<r||t&&e.getBoundingClientRect().top.toFixed(0)-1<=0&&e.innerHeight<=r?(cancelAnimationFrame(a),e&&e.focus(),setTimeout(()=>{n=!1},300)):window.requestAnimationFrame(s)})}function a(e,t,o){n=!0,!o&&t.offsetHeight<window.innerHeight||(e.classList.add("animate-fade"),t.classList.remove("animate-fade")),setTimeout(()=>n=!1,300)}function i(o,i){if(o.preventDefault(),!n){let r,c=Array.from(e).findIndex(e=>e.classList.contains("animate")),l=i||o.deltaY>0;if(r=l?c+1<e.length?Array.from(e)[c+1]:Array.from(e)[c]:c>0?Array.from(e)[c-1]:Array.from(e)[0],console.log(c,e.length,e[c].getBoundingClientRect().top,l,i),e[c].classList.contains("section--variants"))l&&t[t.length-1].classList.contains("variant--current")||!l&&t[0].classList.contains("variant--current")?new s(r,l,600):(e[c].scrollIntoView({behavior:"auto"}),new function(e,t,o){n=!0;let s=e.querySelector(".section__variants").getBoundingClientRect().top,a=e.querySelector("ul"),i=e.querySelector(".variant--current"),r=o?Array.from(t).findIndex(e=>e.classList.contains("variant--current"))+1:Array.from(t).findIndex(e=>e.classList.contains("variant--current"))-1,c=Array.from(t)[r].getBoundingClientRect().top,l=0;if(a.style.transform){let e=window.getComputedStyle(a);l=new DOMMatrixReadOnly(e.transform).m42}i.classList.remove("variant--current"),Array.from(t)[r].classList.add("variant--current"),a.style.transform=`translateY(${s-c+l}px)`,setTimeout(()=>n=!1,300)}(document.querySelector(".section--variants"),t,l));else if(e[c].classList.contains("section--world")){let t=document.querySelectorAll(".section--world .section__slide");l&&t[t.length-1].classList.contains("show")||!l&&t[0].classList.contains("show")?new s(r,l,600):(e[c].scrollIntoView({behavior:"auto"}),new function(e,t,o){n=!0;let s=Array.from(t).findIndex(e=>e.classList.contains("show")),a=o?s+1:s-1;Array.from(t)[s].classList.remove("show"),Array.from(t)[a].classList.add("show"),e.setAttribute("data-slide",+a),setTimeout(()=>n=!1,400)}(e[c],t,l))}else if(e[c].classList.contains("section--roadmap")||r.classList.contains("section--roadmap")&&!l||r.classList.contains("section--opportunities")&&!l){let t=document.querySelector(".section--roadmap .expertise");t.classList.contains("animate-off")?l?(new a(e[c].querySelector(".section__content"),t,l),new s(t,l,900,"bottom"),t.classList.remove("animate-off")):(r.querySelector(".community").classList.remove("animate-fade"),new s(r.querySelector(".community"),l,900,"center")):t.classList.contains("animate-fade")?(t.classList.remove("animate-fade"),r.querySelector(".section__content").classList.add("animate-fade"),new s(t,l,900,"bottom")):l?(t.classList.add("animate-fade"),new s(r,l,600)):(new s(e[c],l,600),t.classList.add("animate-off"),e[c].querySelector(".section__content").classList.remove("animate-fade"))}else if(e[c].classList.contains("section--opportunities")||r.classList.contains("section--opportunities")&&!l||r.classList.contains("section--backstory")&&!l){let t=document.querySelector(".section--opportunities .community");t.classList.contains("animate-off")?l?(t.classList.remove("animate-off"),new a(e[c].querySelector(".section__content"),t,l),new s(t,l,900,"center")):(r.querySelector(".place").classList.remove("animate-fade"),new s(r.querySelector(".place"),l,900,"center")):t.classList.contains("animate-fade")?(t.classList.remove("animate-fade"),r.querySelector(".section__content").classList.add("animate-fade"),new s(t,l,900,"center")):l?(new s(r,l,600),t.classList.add("animate-fade")):(new s(e[c],l,600),t.classList.add("animate-off"),e[c].querySelector(".section__content").classList.remove("animate-fade"))}else if(e[c].classList.contains("section--backstory")||r.classList.contains("section--backstory")&&!l||r.classList.contains("section--world")&&!l){let t=document.querySelector(".section--backstory .place");t.classList.contains("animate-off")?l?(t.classList.remove("animate-off"),new a(e[c].querySelector(".section__content"),t,l),new s(t,l,900,"center")):(e[c].classList.remove("animate-off"),new s(r,l,600)):t.classList.contains("animate-fade")?(t.classList.remove("animate-fade"),r.querySelector(".section__content").classList.add("animate-fade"),new s(t,l,900,"center")):l?(new s(r,l,600),t.classList.add("animate-fade")):(new s(e[c],l,600),t.classList.add("animate-off"),e[c].querySelector(".section__content").classList.remove("animate-fade"))}else e[c].classList.contains("footer")&&r.classList.contains("footer")?(console.log("footer"),l?new s(r,l,600,"bottom"):new s(r,l,600)):(console.log(r),new s(r,l,600))}}let r;function c(e){let t=window.innerWidth/2,n=window.innerHeight/2,o=e.clientX,s=e.clientY;this.querySelectorAll(".parallaxed").forEach((e,a)=>{let i=-.001*a-.001;e.style.marginLeft=`${(o-t)*i}%`,e.style.marginTop=`${(s-n)*i}%`})}e.forEach(e=>o.observe(e)),window.addEventListener("wheel",i,{passive:!1}),window.addEventListener("mousewheel",i,{passive:!1}),window.addEventListener("DOMMouseScroll",i,{passive:!1}),window.addEventListener("touchstart",e=>{r=e.touches[0].screenY},{passive:!1}),window.addEventListener("touchmove",e=>{let t=r-e.touches[0].screenY;console.log(t),t>=50&&(e.preventDefault(),new i(e,t>0)),t<=-50?(e.preventDefault(),new i(e,t>0)):e.preventDefault()},{passive:!1}),document.querySelectorAll(".parallax").forEach(e=>{e.addEventListener("mousemove",c)}),new Splide(".road",{perPage:3,perMove:1,breakpoints:{920:{perPage:2},520:{perPage:1}}}).mount(),new Splide(".section__articles",{perPage:3,perMove:1,gap:"32px",breakpoints:{640:{gap:"16px",perPage:2},520:{gap:"16px",perPage:1}}}).mount(),new Splide(".section__opportunities",{perPage:4,perMove:1,gap:"32px",breakpoints:{920:{perPage:2},640:{perPage:1}}}).mount()};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
